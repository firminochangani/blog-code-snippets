// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package httpapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for TaskStatus.
const (
	Blocked    TaskStatus = "blocked"
	Cancelled  TaskStatus = "cancelled"
	Completed  TaskStatus = "completed"
	InProgress TaskStatus = "in_progress"
	Todo       TaskStatus = "todo"
)

// CreateTaskRequest defines model for CreateTaskRequest.
type CreateTaskRequest struct {
	Name string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// GetAllTasksPayload defines model for GetAllTasksPayload.
type GetAllTasksPayload struct {
	Data []Task `json:"data"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	Name      string     `json:"name"`
	Status    TaskStatus `json:"status"`
}

// TaskStatus defines model for TaskStatus.
type TaskStatus string

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTaskRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /tasks)
	GetAllTasks(ctx echo.Context) error

	// (POST /tasks)
	CreateTask(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTasks(ctx)
	return err
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTask(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tasks", wrapper.GetAllTasks)
	router.POST(baseURL+"/tasks", wrapper.CreateTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVTW/jNhD9K8K0wF5ky9u9LHSqGxtF0G5TJLktgoCmRhI3FMnljNIagf57MZTt2JGD",
	"7sEnk9bwzZt58/EC2nfBO3RMUL5ARAreEabLCmvVW17H6KPctXeMjuWoQrBGKzbeFd/IO/mPdIudktPP",
	"EWso4afiFbwYv1KR0G53bmAYhhwqJB1NEDAoYZk16DAanaGYZvHVNt/5SOyuIirGe0VPt/i9R0q8QvQB",
	"I5sxAKc6lF/eBoQSiKNxTcKJ+L03ESsov45WD0MOp9QmaLjPwynf9CrTPbHvdpS1rzCjXreZouwDdsrY",
	"R+Mee8IPkL9lk0OHRKrBKfQyO7pnauN7zrjF0csU6U1ce6s9/MPhgd98Q83i+nfkpbWSRPpbba1X1TTu",
	"SnFS1TB29H/yCpQA7zypGNV2wiwhSsaT9cShTspWjypJWvvYyUle4YxNh+dyaKozQufvVUAOxIr7H4rm",
	"brR8G4OpYAefHxM+IO/Duzs4Qtd38pJ95SEH4x5D9E1EIshhY71+QsEUGhZ5PCun0VqsjsQ7qD3kgP8y",
	"Rqfsymualk/LHKgsisZw22/m2ndFbf0/+qnYWN/MpEpn5EwIyFQsPs5UMLPaROKZvJw13irXFLfr5erL",
	"et4Jnz7aS+Em0Vzt94NF6aR2ahYooTaxM87Pdatco5z5tZEP4gsmE+P+ZnWT3WF8NlrUsEbjroFH+eHL",
	"9f1lyRd/Xl+t/7pLWZFix9jRTb2ncKkM5cCGreBJyczoWUMOzxhpDHsxX8w/insf0KlgoIRP88X8E+QQ",
	"FLepIAqW1pZTgym/0mdpbF9XUB63P+Snw/+XxeJiM//MlDkz+G/+GKVNS+c9yAPH4mQ7CRqrhqS/0lCR",
	"9guezsT8ujdg7Ggk/s1X24tFO11Mw+nw4NjjcD7dpxm5ul0v79eri6YlbVGMUkZQfn056oqyKKzXyrae",
	"uPy8+LyA4WH4LwAA//+3QC9AIQgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
